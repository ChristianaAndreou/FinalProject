---
title: "Sentiment Analysis Results"
output: html_document
code_folding: hide  # This will hide all code blocks by default, and they will expand on click
execute:
  echo: false
---

## 1. Data Overview

Below is a table showing a preview of the dataset. You can search and find whenever you want to find.

```{r, message=FALSE, warning=FALSE, echo=FALSE}
# Install and load necessary libraries
library(plotly)
library(DT)
library(readr)
library(dplyr)
library(reactable)
library(htmltools)
library(sentimentr)  # Adding sentimentr library for sentiment analysis
library(tm)  # Load tm library for text mining
library(wordcloud)  # Load wordcloud library for wordcloud generation
library(RColorBrewer)  # For color palettes in wordclouds

# Reading the CSV with UTF-8 encoding and cleaning invalid characters
df_tw <- read_csv("/home/chra.andreou/FinalProject/sentimentanalysis/dataset.csv", 
                  locale = locale(encoding = "UTF-8"))

# Cleaning non-printable characters from the entire dataframe
df_tw <- df_tw %>%
  mutate(across(everything(), ~ iconv(.x, from = "UTF-8", to = "UTF-8", sub = "")))

# Creating sentiment column based on positive, negative, neutral
df_tw <- df_tw %>%
  mutate(sentiment = case_when(
    positive == 1 ~ "Positive",
    negative == 1 ~ "Negative",
    neutral  == 1 ~ "Neutral",
  ))

# Replacing non-printable characters (for additional safety)
df_tw[] <- lapply(df_tw, function(x) gsub("[^[:print:]]", "", x))

# Performing sentiment analysis with sentimentr library
sentiment_results <- sentimentr::sentiment(df_tw$review)

# Adding sentiment analysis result to the df_tw
df_tw$sentiment_analysis <- sentiment_results$sentiment[1:nrow(df_tw)]

# Creating the reactable table
reactable(
  df_tw,
  filterable = TRUE,  # Allows filtering
  searchable = TRUE,  # Adds search field
  columns = list(
    review = colDef(name = "Review", width = 500),
    sentiment = colDef(name = "Sentiment"),
    sentiment_analysis = colDef(name = "Sentiment Analysis")  # Adding sentiment analysis
  ),
  details = function(index) {
    row <- df_tw[index, ]
    htmltools::div(
      style = "padding: 16px; background: #f9f9f9;",
      HTML(paste0(
        "<p><strong>Review:</strong> ", row$review, "</p>",
        "<p><strong>Sentiment:</strong> ", row$sentiment, "</p>",
        "<p><strong>Sentiment Analysis:</strong> ", row$sentiment_analysis, "</p>"
      ))
    )
  },
  onClick = "expand"
)

cat("Summary table for overall sentiment")
# Creating the summary table for overall sentiment
overall_sentiment <- df_tw %>% 
  count(sentiment) %>% 
  mutate(Proportion = n / sum(n))

# Creating the interactive plot
p <- ggplot(overall_sentiment, aes(x = sentiment, y = Proportion, fill = sentiment)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  labs(title = "Sentiment Analysis Distribution", x = "Sentiment", y = "Proportion")

ggplotly(p)  # Makes the plot interactive



cat("Positive reviews wordcloud")
# Filtering positive reviews for word cloud generation
positive_reviews <- df_tw %>% 
  filter(sentiment == "Positive") %>% 
  pull(review)

# Creating corpus & word cloud for positive sentiment
corpus <- Corpus(VectorSource(positive_reviews))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("en"))

wordcloud(corpus, max.words = 100, random.order = FALSE, colors = brewer.pal(8, "Dark2"))



cat("Negative reviews wordcloud")
# Filtering negative reviews for word cloud generation
negative_reviews <- df_tw %>% 
  filter(sentiment == "Negative") %>% 
  pull(review)

# Creating corpus & word cloud for negative sentiment
corpus <- Corpus(VectorSource(negative_reviews))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("en"))

wordcloud(corpus, max.words = 100, random.order = FALSE, colors = brewer.pal(8, "Reds"))



cat("Neutral reviews wordcloud")
# Filtering neutral reviews for word cloud generation
neutral_reviews <- df_tw %>% 
  filter(sentiment == "Neutral") %>% 
  pull(review)

# Creating corpus & word cloud for neutral sentiment
corpus <- Corpus(VectorSource(neutral_reviews))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("en"))

wordcloud(corpus, max.words = 100, random.order = FALSE, colors = brewer.pal(8, "Blues"))

```