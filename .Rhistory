R
install.packages("visNetwork")
install.packages("timeline")
install.packages("htmlwidgets")
install.packages("plotly")
quarto check
Quarto check.options(all)
quarto --version
quarto version
quarto .version
install.packages("timevis")
install.packages("leaflet")
install.packages("timevis")
library(timevis)
install.packages("ggplot2")
install.packages("dplyr")
install.packages("tidyverse")
install.packages("syuzhet")
hotel_reviews <- read.csv("reviewsfinal2complete_cleaned.csv")
install.packages("reactable")
install.packages("textdata")
library(kableExtra) # for tables
library(kableExtra) # for tables
library(kableExtra)
install.packages("kableExtra")
install.packages("kableExtra")
install.packages("reactable")
install.packages("ggpubr")
install.packages("here")
library(rstatix)
install.packages("here")
install.packages("pandas")
install.packages("tidyverse")
install.packages("kableExtra")
install.packages("kableExtra")
install.packages("reactable")
install.packages("ggpubr")
install.packages("here")
install.packages("rstatix")
install.packages("knitr")
install.packages("DT")
install.packages("readr")
install.packages("text")
install.packages("text")
install.packages("text")
install.packages("text")
install.packages()
shiny::runApp('SA2')
runApp('SA2')
runApp('SA2')
install.packages("ggplotly")
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(plotly)
# Read the dataset
df_tw <- read_csv("/home/chra.andreou/FinalProject/visualizations/dataset.csv", locale = locale(encoding = "UTF-8"))
install.packages("readr")
str(df)
runApp('visualizations')
runApp('visualizations')
install.packages("plotly")
install.packages("plotly")
shinny::runApp()
shiny:runApp()
install.packages('shiny')
install.packages("shiny")
library(shiny); runApp('sentimentanalysis/shiny_app.R')
runApp('sentimentanalysis/shiny_app.R')
shiny::runApp("shiny_app.R")
runApp('sentimentanalysis/shiny_app.R')
setwd("/home/chra.andreoy/FinalProject/sentimentanalysis/shiny_app.R")
shiny::runApp("shiny_app.R")
getwd()
setwd(/home/chra.andreoy/FinalProject/sentimentanalysis/shiny_app.R)
setwd(home/chra.andreoy/FinalProject/sentimentanalysis/shiny_app.R)
setwd(home/chra.andreou/FinalProject/sentimentanalysis/shiny_app.R)
setwd(chra.andreou/FinalProject/sentimentanalysis/shiny_app.R)
setwd(shiny_app.R)
list.files()
source("shiny_app.R")
list.files(recursive = TRUE)
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
install.packages("tidyr")
install.packages("tidyr")
shiny::runApp("shiny_app.R")
shiny::runApp("shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
shiny::runApp("sentimentanalysis/shiny_app.R")
runApp('sentimentanalysis/shiny_app.R')
runApp('visualizations')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
<h2>Educational Timeline</h2>
| Year | Event                                             |
| Course Code | Course Name                                     |
install.packages("kable")
runApp('sentimentanalysis/shiny_app.R')
runApp('sentimentanalysis/shiny_app.R')
install.packages("profvis")
# Wrap the code you want to profile in the profvis() function
profvis({
# Εδώ βάλε τον κώδικα που θέλεις να ελέγξεις
df_tw <- read_csv("/home/chra.andreou/FinalProject/sentimentanalysis/dataset.csv",
locale = locale(encoding = "UTF-8"),
n_max = 1000)
trace(read_csv, print = TRUE)
# Install and load necessary libraries
library(plotly)
library(DT)
library(readr)
library(dplyr)
library(reactable)
library(htmltools)
library(sentimentr)  # Adding sentimentr library for sentiment analysis
# Reading the CSV with UTF-8 encoding and cleaning invalid characters
df_tw <- read_csv("/home/chra.andreou/FinalProject/sentimentanalysis/dataset.csv",
locale = locale(encoding = "UTF-8"))
df_tw <- df_tw %>%
mutate(across(everything(), ~ iconv(.x, from = "UTF-8", to = "UTF-8", sub = "")))
# Creating sentiment column based on positive, negative, neutral
df_tw <- df_tw %>%
mutate(sentiment = case_when(
positive == 1 ~ "Positive",
negative == 1 ~ "Negative",
neutral  == 1 ~ "Neutral",
))
# Replacing non-printable characters (for additional safety)
df_tw[] <- lapply(df_tw, function(x) gsub("[^[:print:]]", "", x))
# Performing sentiment analysis with sentimentr library
sentiment_results <- sentimentr::sentiment(df_tw$review)
# Adding sentiment analysis result to the df_tw
df_tw$sentiment_analysis <- sentiment_results$sentiment[1:nrow(df_tw)]
# Creating the reactable table
reactable(
df_tw,
filterable = TRUE,  # Allows filtering
searchable = TRUE,  # Adds search field
columns = list(
review = colDef(name = "Review", width = 500),
sentiment = colDef(name = "Sentiment"),
sentiment_analysis = colDef(name = "Sentiment Analysis")  # Adding sentiment analysis
),
details = function(index) {
row <- df_tw[index, ]
htmltools::div(
style = "padding: 16px; background: #f9f9f9;",
HTML(paste0(
"<p><strong>Review:</strong> ", row$review, "</p>",
"<p><strong>Sentiment:</strong> ", row$sentiment, "</p>",
"<p><strong>Sentiment Analysis:</strong> ", row$sentiment_analysis, "</p>"
))
)
},
onClick = "expand"
)
cat("Summary table for overall sentiment")
# Creating the summary table for overall sentiment
overall_sentiment <- df_tw %>%
count(sentiment) %>%
mutate(Proportion = n / sum(n))
# Creating the interactive plot
p <- ggplot(overall_sentiment, aes(x = sentiment, y = Proportion, fill = sentiment)) +
geom_bar(stat = "identity") +
theme_minimal() +
labs(title = "Sentiment Analysis Distribution", x = "Sentiment", y = "Proportion")
ggplotly(p)  # Makes the plot interactive
cat("Positive reviews wordcloud")
# Filtering positive reviews for word cloud generation
positive_reviews <- df_tw %>%
filter(sentiment == "Positive") %>%
pull(review)
# Creating corpus & word cloud for positive sentiment
library(wordcloud)
library(tm)
corpus <- Corpus(VectorSource(positive_reviews))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
wordcloud(corpus, max.words = 100, random.order = FALSE, colors = brewer.pal(8, "Dark2"))
cat("Negative reviews wordcloud")
# Filtering negative reviews for word cloud generation
negative_reviews <- df_tw %>%
filter(sentiment == "Negative") %>%
pull(review)
# Creating corpus & word cloud for negative sentiment
corpus <- Corpus(VectorSource(negative_reviews))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
wordcloud(corpus, max.words = 100, random.order = FALSE, colors = brewer.pal(8, "Reds"))
cat("Neutral reviews wordcloud")
# Filtering neutral reviews for word cloud generation
neutral_reviews <- df_tw %>%
filter(sentiment == "Neutral") %>%
pull(review)
# Creating corpus & word cloud for neutral sentiment
corpus <- Corpus(VectorSource(neutral_reviews))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeWords, stopwords("en"))
wordcloud(corpus, max.words = 100, random.order = FALSE, colors = brewer.pal(8, "Blues"))
trace(read_csv, print = TRUE)
system.time(dataset.csv)
rmarkdown::render("sentiment_analysis.qmd")
rmarkdown::render("sentimentanalysis-index.qmd")
rmarkdown::render("sentimentanalysis-index.qmd")
quarto render sentimentanalysis-index.qmd
quarto render sentimentanalysis-index.qmd
library(data.table)
df_tw <- fread("/home/chra.andreou/FinalProject/sentimentanalysis/dataset.csv", nrows = 100)
head(df_tw)
print("Starting data load...")
df_tw <- fread("/home/chra.andreou/FinalProject/sentimentanalysis/dataset.csv", nrows = 100)
df_tw <- fread("/home/chra.andreou/FinalProject/sentimentanalysis/dataset.csv", nrows = 100)
print("Data loaded successfully!")
install.packages("kableExtra")
install.packages("kableExtra")
install.packages("kableExtra")
install.packages("kableExtra")
install.packages("kableExtra")
install.packages("ggbarplot")
runApp('sentimentanalysis/shiny_app.R')
runApp('sentimentanalysis/shiny_app.R')
runApp('wordclouds/appword.R')
runApp('sentimentanalysis/shiny_app.R')
df_tw <- fread("/home/chra.andreou/FinalProject/sentimentanalysis/dataset.csv", nrows = 100)
runApp('wordclouds/appword.R')
runApp('wordclouds/appword.R')
runApp('sentimentanalysis/shiny_app.R')
runApp('wordclouds/appword.R')
runApp('sentimentanalysis/shiny_app.R')
runApp('wordclouds/appword.R')
