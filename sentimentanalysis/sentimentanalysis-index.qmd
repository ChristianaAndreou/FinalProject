---
title: "Sentiment Analysis Overview"
format: html
execute:
  echo: false
---

```{r, message=FALSE, warning=FALSE}
# Φόρτωση των βιβλιοθηκών
library(dplyr)
library(tidyr)  # Φόρτωσε την tidyr για pivot_longer
library(knitr)
library(kableExtra)  # Φόρτωσε την kableExtra για kbl()
library(ggpubr)
library(shiny)
library(ggplot2)

# Φόρτωση των δεδομένων
df_tw <- read.csv("/home/chra.andreou/FinalProject/sentimentanalysis/dataset.csv", fileEncoding = "UTF-8")

# Μετατροπή των στηλών σε αριθμητικές τιμές, αν χρειάζεται
df_tw$positive <- as.numeric(df_tw$positive)
df_tw$negative <- as.numeric(df_tw$negative)
df_tw$neutral <- as.numeric(df_tw$neutral)


knitr::asis_output("## **Sentiment Overall**\n\n")

# Δημιουργία πίνακα συχνότητας για κάθε συναισθηματική κατηγορία
overall_sentiment <- df_tw %>%
  summarise(
    Positive = sum(positive == 1, na.rm = TRUE),
    Negative = sum(negative == 1, na.rm = TRUE),
    Neutral = sum(neutral == 1, na.rm = TRUE)
  ) %>%
  pivot_longer(cols = c(Positive, Negative, Neutral), names_to = "Sentiment", values_to = "Count") %>%
  mutate(Proportion = Count / sum(Count, na.rm = TRUE))

# Δημιουργία πίνακα
overall_sentiment %>% 
  kbl()  # Δημιουργία του πίνακα με kbl()



knitr::asis_output("## **Sentiment Bar Plot**\n\n")

# Δημιουργία του bar plot
ggbarplot(
  data = overall_sentiment,
  x = "Sentiment",
  y = "Proportion",
  fill = "Sentiment",
  label = TRUE,
  label.pos = "out",
  title = "Sentiment Overall Distribution",
  xlab = "Sentiment",
  ylab = "Proportion (%)"
)
```

---
title: "Visualizations"
format: html
execute:
  echo: false  # Hides the code during rendering
---
# Interactive Shiny Application

[Click here to open the Shiny application](http://demotec.cut.ac.cy:8787/?view=shiny_foreground)

```{r, message=FALSE, warning=FALSE}
# Φόρτωση βιβλιοθηκών
library(wordcloud)
library(dplyr)
library(tidyr)
library(readr)
library(RColorBrewer)
library(ggplot2)
library(shiny)
library(tidyverse)
library(plotly)

# Διαβάζουμε το dataset με UTF-8 encoding
df <- read_csv("/home/chra.andreou/FinalProject/sentimentanalysis/dataset.csv", locale = locale(encoding = "UTF-8"))

# Καθαρισμός του encoding για την αποφυγή ειδικών χαρακτήρων
df_clean <- df %>%
  mutate(across(everything(), ~ iconv(as.character(.), from = "UTF-8", to = "UTF-8", sub = "NA"))) %>%
  select(id, review, Clean, Comfort, `Facilities/Amenities`, Location, 
         `Restaurant (dinner)`, Staff, `View (Balcony)`, Breakfast, Room, 
         Pool, Beach, `Bathroom/Shower (toilet)`, Bar, Bed, Parking, Noise, 
         `Reception-checkin`, `Lift`, `Value for money`, `Wi-Fi`)

# Επιλογή των σημαντικών στηλών και μετατροπή σε long format
df_sentiment <- df_clean %>%
  pivot_longer(cols = -c(id, review), names_to = "topic", values_to = "value") %>%
  filter(value == 1)  # Κρατάμε μόνο τις γραμμές όπου η τιμή είναι 1

# Δημιουργία Heatmap

# Πρώτα, υπολογίζουμε τη συχνότητα των topics για κάθε συνδυασμό κατηγορίας και κριτικής
topic_matrix <- df_sentiment %>%
  count(id, topic) %>%
  pivot_wider(names_from = topic, values_from = n, values_fill = list(n = 0))

# Μετατροπή σε long format για plotly (Χρησιμοποιούμε τα δεδομένα σωστά)
heatmap_data_long <- topic_matrix %>%
  pivot_longer(cols = -id, names_to = "topic", values_to = "frequency") %>%
  filter(frequency > 0)  # Διατηρούμε μόνο τις γραμμές με θετική συχνότητα

# Δημιουργία διαδραστικού Heatmap με plotly
heatmap_plot <- plot_ly(data = heatmap_data_long, 
                        x = ~topic, 
                        y = ~id, 
                        z = ~frequency, 
                        type = "heatmap", 
                        colors = c("white", "blue")) %>%
  layout(title = "Interactive Heatmap of Topics by Review",
         xaxis = list(title = "Topic"),
         yaxis = list(title = "Review ID"))

# Προβολή του γραφήματος
heatmap_plot

```

---
title: "Sentiment Analysis"
output: html_document
runtime: shiny
---

## Shiny - sentiment distibution for selected aspect

This file includes sentiment analysis using Shiny to visualize the results. <br>
If it doesn't open, go to - FinalProject>sentimentanalysis>shiny_app.R

```{r, message=FALSE, warning=FALSE}
# Load libraries
library(shiny)
library(dplyr)
library(ggplot2)
library(tidyr)

# Load dataset
df_tw <- read.csv("/home/chra.andreou/FinalProject/sentimentanalysis/dataset.csv", fileEncoding = "UTF-8")

# Convert columns to numeric values
df_tw$positive <- as.numeric(df_tw$positive)
df_tw$negative <- as.numeric(df_tw$negative)
df_tw$neutral <- as.numeric(df_tw$neutral)

# Create the overall sentiment table
overall_sentiment <- df_tw %>%
  summarise(
    Positive = sum(positive == 1, na.rm = TRUE),
    Negative = sum(negative == 1, na.rm = TRUE),
    Neutral = sum(neutral == 1, na.rm = TRUE)
  ) %>%
  pivot_longer(cols = c(Positive, Negative, Neutral), names_to = "Sentiment", values_to = "Count") %>%
  mutate(Proportion = Count / sum(Count, na.rm = TRUE) * 100)

# Define the UI for the Shiny app
ui <- fluidPage(
  titlePanel("Sentiment Analysis Overview"),

  sidebarLayout(
    sidebarPanel(
      p("Explore the sentiment distribution of the data.")
    ),

    mainPanel(
      plotOutput("sentimentPlot")
    )
  )
)

# Define the server for the Shiny app
server <- function(input, output) {
  output$sentimentPlot <- renderPlot({
    ggplot(overall_sentiment, aes(x = Sentiment, y = Proportion, fill = Sentiment)) +
      geom_bar(stat = "identity") +
      geom_text(aes(label = round(Proportion, 1)), vjust = -0.5) +
      labs(title = "Sentiment Overall Distribution", x = "Sentiment", y = "Proportion (%)") +
      theme_minimal()
  })
}

# Create the Shiny app
shinyApp(ui = ui, server = server)
```



